{"version":3,"sources":["Services/payment/newPayment.tsx","Pages/Payment/New/NewPayment.tsx","Shared/components/loading/Loading.tsx","Shared/components/error-form/ErrorForm.tsx"],"names":["newPayment","payment","a","fetch","process","getRequestOptions","response","json","method","payload","headers","body","JSON","stringify","NewPayment","useForm","register","handleSubmit","errors","formState","reset","setResponsePayment","useContext","ResponsePaymentContext","useState","loading","setLoading","loadingObject","message","className","Loading","onSubmit","data","e","preventDefault","setTimeout","console","log","autoComplete","type","id","required","placeholder","htmlFor","owner_payment","ErrorForm","total_amount"],"mappings":"mPAIaA,EAAU,uCAAG,WAAQC,GAAR,eAAAC,EAAA,sEACKC,MAAM,GAAD,OAJVC,wBAIU,gBAAmCC,EAAkB,OAAQJ,IADvE,cACZK,EADY,yBAEXA,EAASC,QAFE,2CAAH,sDAMjBF,EAAoB,SAACG,EAAgBC,GACvC,MAAO,CACHD,SACAE,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAWJ,K,+BCHjBK,EAAa,WAAO,IAAD,IAC5B,EAAgEC,cAAzDC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAA2BC,EAA5C,EAA+BC,UAAaD,OAAUE,EAAtD,EAAsDA,MAC9CC,EAAuBC,qBAAWC,KAAlCF,mBAGR,EAAgCG,oBAAW,GAA3C,mBAAQC,EAAR,KAAiBC,EAAjB,KAEMC,EAAgB,CAClBF,UACAG,QAAS,uBAmBb,OACI,sBAAKC,UAAU,UAAf,UAEMJ,GAAW,cAACK,EAAA,EAAD,eAAcH,IAE3B,uBACIE,UAAU,cACVE,SAAWd,GAvBN,SAAEe,EAAWC,GAC1BA,EAAEC,iBACFR,GAAY,GACZS,WAAU,sBAAE,8BAAAjC,EAAA,+EAEsBF,EAAYgC,GAFlC,gBAEI/B,EAFJ,EAEIA,QACRoB,EAAmB,CAAEW,KAAM/B,IAC3ByB,GAAW,GACXN,IALI,kDAOJgB,QAAQC,IAAR,MACAX,GAAW,GARP,0DAUT,SAWKY,aAAa,MAHjB,UAKI,sBAAKT,UAAU,cAAf,UACI,+CACIU,KAAK,OACLC,GAAG,iBACCxB,EAAS,gBAAiB,CAAEyB,UAAU,KAH9C,IAIIC,YAAY,gBACZb,UAAU,iBAEd,uBACIc,QAAQ,OACRd,UAAU,cAFd,8BAIEX,EAAO0B,eAAiB,cAAEC,EAAA,EAAF,CAAYjB,QAAQ,sBAItD,sBAAKC,UAAU,cAAf,UACI,+CACIU,KAAK,OACLC,GAAG,eACCxB,EAAS,gBAHjB,IAII0B,YAAY,SACZb,UAAU,iBAEd,uBACIc,QAAQ,cACRd,UAAU,cAFd,6BAQJ,sBAAKA,UAAU,cAAf,UACI,+CACIU,KAAK,QACDvB,EAAS,eAAgB,CAAEyB,UAAU,KAF7C,IAGIC,YAAY,KACZb,UAAU,iBAEd,uBACIc,QAAQ,SACRd,UAAU,cAFd,qBAK4B,cAA9B,UAAAX,EAAO4B,oBAAP,eAAqBP,OAAuB,cAAEM,EAAA,EAAF,CAAYjB,QAAQ,mBAClC,aAA9B,UAAAV,EAAO4B,oBAAP,eAAqBP,OAAsB,cAAEM,EAAA,EAAF,CAAYjB,QAAQ,2BAIjE,wBAAQC,UAAU,eAAlB,8B,gCC/FZ,mDAEaC,EAAU,SAAC,GAAoD,IAAhDL,EAA+C,EAA/CA,QAASG,EAAsC,EAAtCA,QACjC,OACI,qBAAKC,UAAU,UAAf,SACI,sBAAKA,UAAU,eAAf,UACEJ,GAAW,oBAAGI,UAAU,gBAAb,cAAgCD,EAAhC,OACb,oDAAsB,sBAAMC,UAAU,aAAhB,iBAAtB,c,qDCPZ,mDAEagB,EAAY,SAAC,GAAuC,IAApCjB,EAAmC,EAAnCA,QACzB,OACI,qBAAKC,UAAU,cAAf,SACI,kCAAMD,EAAN,W","file":"static/js/7.8aba7573.chunk.js","sourcesContent":["import { PaymentInterface } from '../../Interfaces/payment.interface';\r\nconst { REACT_APP_URL } = process.env;\r\n\r\n\r\nexport const newPayment = async ( payment  : PaymentInterface ) => {\r\n        const response = await fetch(`${ REACT_APP_URL }/payment/new`, getRequestOptions('POST', payment ) );\r\n        return response.json();\r\n}\r\n\r\n\r\nconst getRequestOptions = (method: string, payload: any): {} => {\r\n    return {\r\n        method,\r\n        headers: { 'Content-type': 'application/json' },\r\n        body: JSON.stringify( payload )\r\n    }\r\n}","import { useContext, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { PaymentInterface } from '../../../Interfaces/payment.interface';\r\nimport { Loading } from '../../../Shared/components/loading/Loading';\r\nimport { newPayment } from \"../../../Services/payment/newPayment\";\r\nimport { ResponsePaymentContext } from '../../../Providers/Response/response.payment.provider';\r\n\r\nimport './index.css'\r\nimport { ErrorForm } from '../../../Shared/components/error-form/ErrorForm';\r\n\r\nexport const NewPayment = () => {\r\n    const {register, handleSubmit, formState: { errors }, reset } = useForm<PaymentInterface>();\r\n    const { setResponsePayment } = useContext(ResponsePaymentContext);\r\n    // const [ errorsResponse, setErrors ] = useState();\r\n    \r\n    const [ loading, setLoading ] = useState(  false )\r\n    \r\n    const loadingObject = {\r\n        loading,\r\n        message: 'Saving new payment.'\r\n    }\r\n\r\n    const onSubmit = ( data: any, e: any ) => {\r\n        e.preventDefault();\r\n        setLoading( true );\r\n        setTimeout( async () => {\r\n            try {\r\n                const { payment } = await newPayment( data );\r\n                setResponsePayment({ data: payment });\r\n                setLoading(false);\r\n                reset();\r\n            }catch( error ){\r\n                console.log( error );\r\n                setLoading(false);\r\n            }\r\n        }, 1500 )\r\n}\r\n    \r\n    return (\r\n        <div className=\"wrapper\">\r\n\r\n            { loading && <Loading { ...loadingObject } /> }\r\n\r\n            <form \r\n                className=\"form fadeIn\" \r\n                onSubmit={ handleSubmit(onSubmit) }\r\n                autoComplete=\"off\"\r\n            >\r\n                <div className=\"form__group\">\r\n                    <input \r\n                        type=\"text\" \r\n                        id=\"owner_payment\"\r\n                        {...register('owner_payment', { required: true } ) }\r\n                        placeholder=\"e.g. John Doe\"\r\n                        className=\"form__input\"\r\n                    />\r\n                    <label \r\n                        htmlFor=\"name\"\r\n                        className=\"form__label\"> Payment's owner \r\n                    </label>\r\n                    { errors.owner_payment && < ErrorForm message=\"Field required\" /> }\r\n                </div> \r\n            \r\n                \r\n            <div className=\"form__group\">\r\n                <input \r\n                    type=\"text\" \r\n                    id=\"description\"\r\n                    {...register(\"description\")}\r\n                    placeholder=\"Dinner\"\r\n                    className=\"form__input\"\r\n                />\r\n                <label \r\n                    htmlFor=\"description\"\r\n                    className=\"form__label\"\r\n                    > Description \r\n                </label>\r\n                \r\n            </div>\r\n            \r\n            <div className=\"form__group\">\r\n                <input \r\n                    type=\"text\"  \r\n                    {...register(\"total_amount\", { required: true } ) }\r\n                    placeholder=\"10\"\r\n                    className=\"form__input\"\r\n                />  \r\n                <label \r\n                    htmlFor=\"amount\"\r\n                    className=\"form__label\"\r\n                    > Amount \r\n                    </label>\r\n            { errors.total_amount?.type === 'required' && < ErrorForm message=\"Field required\" /> }\r\n            { errors.total_amount?.type === 'pattern' && < ErrorForm message=\"Only number allowed\" /> }\r\n            </div>\r\n\r\n\r\n            <button className=\"form__button\"> Submit </button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.css';\r\n\r\nexport const Loading = (  { loading, message }  : any ) : ReactElement  => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"loading__box\">\r\n            { loading && <p className=\"loading__text\"> { message } </p> }\r\n            <p>Please wait just a <span className=\"blink-text\">few</span>.</p>     \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nLoading.propTypes = {\r\n    stateLoading : PropTypes.object\r\n}","import { ReactElement } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './index.css';\r\n\r\nexport const ErrorForm = ( { message } : any ): ReactElement => {\r\n    return (\r\n        <div className=\"form__error\">\r\n            <p> { message } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nErrorForm.propTypes = {\r\n    message : PropTypes.string\r\n}"],"sourceRoot":""}