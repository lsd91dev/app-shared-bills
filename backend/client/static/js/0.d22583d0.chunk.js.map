{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_defineProperty","obj","value","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","done","e","_e","f","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","from","element","type","isObjectType","isNullOrUndefined","Date","name","substring","search","names","some","current","getNodeParentName","Boolean","val","undefined","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","getFieldsValues","fieldsRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","defaultResult","isValid","validResult","options","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","mount","inputRef","setCustomValidty","reportValidity","setCustomValidity","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","mode","isOnSubmit","tearDowns","tearDown","this","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","updateFormState","resolverRef","formStateRef","defaultValuesRef","fieldArrayDefaultValuesRef","contextRef","inFieldArrayActionRef","isMountedRef","subjectsRef","watch","control","array","state","namesRef","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","register","isHTMLElement","radioRef","selectRef","includes","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","convertToArrayPayload","schemaResult","Promise","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","entries","inputKey","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","currentError","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","subscribe","info","unregister","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","onChange","onBlur","shouldUnmount","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","isLiveInDom","getProxyFormState"],"mappings":"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","file":"static/js/0.d22583d0.chunk.js","sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues(),\n        });\n      }\n    }\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}