{"version":3,"sources":["Shared/constants/payment/routes.tsx","Providers/Response/response.payment.list.provider.tsx","Services/payment/listPayments.tsx","Hooks/useListPayments.tsx","Services/payment/getPayment.tsx","Hooks/useGetPayment.tsx","Providers/Payments/payments.provider.tsx","Providers/Response/response.payment.provider.tsx","Shared/constants/participant/routes.tsx","Routes/RouterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Object","freeze","HOME","name","route","component","React","lazy","then","default","Payments","NEW_PAYMENT","NewPayment","PAYMENT","Payment","ResponsePaymentListContextType","response","payments","participants","total_balance","debtors","setResponse","ResponsePaymentListContext","createContext","ResponsePaymentListContextProvider","children","useState","Provider","value","listPayments","signal","a","fetch","process","json","useListPayments","loading","setLoading","useContext","useEffect","abortController","AbortController","setTimeout","catch","error","abort","getPayment","id","useGetPayment","ResponsePaymentContext","responsePayment","setResponsePayment","payment","data","console","log","PaymentContext","PaymentContextProvider","ResponsePaymentContextType","NEW_PARTICIPANT","NewParticipant","payment_constants_route","participant_constants_route","RouterComponent","fallback","exact","path","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.466685fd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default Object.freeze({\r\n\r\n    HOME: {\r\n        name: 'Home',\r\n        route:'/',\r\n        component: React.lazy( () => import('../../../Pages/Payment/List/Payments').then(({ Payments }) => ({ default: Payments })))\r\n    },\r\n\r\n    NEW_PAYMENT: {\r\n        name: 'NewPayment',\r\n        route:'/payment/new',\r\n        component: React.lazy( () => import('../../../Pages/Payment/New/NewPayment').then(({ NewPayment }) => ({ default: NewPayment })))\r\n    },\r\n\r\n    PAYMENT: {\r\n        name: 'Payment',\r\n        route: '/payment/:id',\r\n        component: React.lazy( () => import('../../../Pages/Payment/Get/Payment').then(({ Payment }) => ({ default: Payment })))\r\n    },\r\n    \r\n    \r\n});\r\n","import React, { useState } from 'react'\r\nimport { ResponsePaymentListInterface } from '../../Interfaces/response.payment.interface';\r\n\r\nconst ResponsePaymentListContextType = {\r\n    response : { \r\n        payments: [],\r\n        participants: [],\r\n        total_balance: [],\r\n        debtors: []\r\n    },\r\n    setResponse: (response: ResponsePaymentListInterface ) => { }\r\n}\r\n\r\nconst ResponsePaymentListContext = React.createContext(ResponsePaymentListContextType)\r\n\r\nconst ResponsePaymentListContextProvider = ({ children } : any) => { \r\n\r\n    const [ response , setResponse ] = useState(ResponsePaymentListContextType.response);    \r\n    \r\n    return ( <ResponsePaymentListContext.Provider value={ { response, setResponse } }>\r\n                { children }\r\n            </ResponsePaymentListContext.Provider>\r\n        )\r\n  }\r\n  \r\n  export { ResponsePaymentListContextProvider, ResponsePaymentListContext } ","const { REACT_APP_URL } = process.env;\r\n\r\nexport const listPayments = async ( signal : any ) => {\r\n        const response = await fetch(`${ REACT_APP_URL }/payment`, signal);\r\n        return response.json();\r\n}","import { useEffect, useContext, useState } from \"react\";\r\nimport { ResponsePaymentListContext } from \"../Providers/Response/response.payment.list.provider\";\r\nimport { listPayments } from \"../Services/payment/listPayments\";\r\n\r\nexport const useListPayments = () => {\r\n    \r\n    const [ loading, setLoading ] = useState(  true )\r\n    const { response, setResponse } = useContext(ResponsePaymentListContext);\r\n\r\n        useEffect( () => {\r\n        const abortController = new AbortController();\r\n        const signal = abortController.signal;\r\n\r\n        setTimeout( () => {\r\n            listPayments( signal ).then( ({ payments, participants, total_balance, debtors } ) => {\r\n                setLoading( false )\r\n                setResponse({ payments, participants, total_balance, debtors });\r\n            }).catch( error => {\r\n                setLoading( false )\r\n                setResponse({ payments: [], participants: [], total_balance: [], debtors : [] });\r\n            })\r\n        }, 1500);\r\n        return () => { abortController.abort() }\r\n    }, [  ])\r\n\r\n    return { response, loading };\r\n} ","const { REACT_APP_URL } = process.env;\r\n\r\nexport const getPayment = async ( id: string, signal : any ) => {\r\n    const response = await fetch(`${ REACT_APP_URL }/payment/${ id }`, signal); \r\n    return response.json();\r\n}","import { useEffect, useContext } from \"react\";\r\nimport { ResponsePaymentContext } from \"../Providers/Response/response.payment.provider\";\r\nimport { getPayment } from \"../Services/payment/getPayment\";\r\n\r\nexport const useGetPayment = (id: string) => {\r\n    \r\n    const { responsePayment, setResponsePayment } = useContext(ResponsePaymentContext);\r\n\r\n    useEffect( () => {\r\n        const abortController = new AbortController();\r\n        const signal = abortController.signal;\r\n\r\n        setTimeout( () => {\r\n             getPayment( id, signal ).then( ({ payment } ) => {\r\n                setResponsePayment( { data: payment} )\r\n            }).catch( error => {\r\n                setResponsePayment({ data: { } });\r\n                console.log( 'Ha habido un error');\r\n                console.log( error );\r\n            }) \r\n        }, 1500); \r\n        return () => { abortController.abort(); }\r\n    }, [])\r\n    \r\n    return responsePayment;\r\n} ","import React from 'react'\r\nimport  { useListPayments, useGetPayment } from '../../Hooks';\r\n\r\n\r\nconst PaymentContext = React.createContext({ useListPayments, useGetPayment });\r\n\r\nconst PaymentContextProvider = ({ children } : any) => {\r\n\r\n    return ( <PaymentContext.Provider value={ { useListPayments, useGetPayment } }>\r\n                { children }\r\n            </PaymentContext.Provider>\r\n        )\r\n  }\r\n  \r\n  export { PaymentContextProvider, PaymentContext } ","import React, { useState } from 'react'\r\nimport { ResponsePaymentInterface } from '../../Interfaces/response.payment.interface';\r\n\r\nconst ResponsePaymentContextType = {\r\n    responsePayment: { data: {} },\r\n    setResponsePayment: ( responsePayment: ResponsePaymentInterface ) => { }\r\n}\r\n\r\nconst ResponsePaymentContext = React.createContext(ResponsePaymentContextType)\r\n\r\nconst ResponsePaymentContextProvider = ({ children } : any) => { \r\n\r\n    const [ responsePayment, setResponsePayment ] = useState( ResponsePaymentContextType.responsePayment);\r\n    \r\n    \r\n    return ( <ResponsePaymentContext.Provider value={ { responsePayment, setResponsePayment } }>\r\n                { children }\r\n            </ResponsePaymentContext.Provider>\r\n        )\r\n  }\r\n  \r\n  export { ResponsePaymentContextProvider, ResponsePaymentContext } ","import React from 'react'\r\n\r\nexport default Object.freeze({\r\n\r\n    NEW_PARTICIPANT: {\r\n        name: 'NewParticipant',\r\n        route:'/participant/new/:id',\r\n        component: React.lazy( () => import('../../../Pages/Participant/New/NewParticipant').then(({ NewParticipant }) => ({ default: NewParticipant })))\r\n    }\r\n    \r\n});","import { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n// import { Page404 } from '../Pages/404/Page404';\r\nimport payment_constants_route from '../Shared/constants/payment/routes';\r\nimport participant_constants_route from '../Shared/constants/participant/routes';\r\nconst { HOME, PAYMENT, NEW_PAYMENT } = payment_constants_route;\r\nconst { NEW_PARTICIPANT } = participant_constants_route;\r\n\r\n\r\nconst RouterComponent = ()  => {\r\n  return (\r\n  <Suspense fallback={ <div>Loading...</div>}>\r\n  <Router>\r\n    <Switch>\r\n          <Route exact path={ HOME.route } component={ HOME.component } />\r\n          <Route exact path={ NEW_PAYMENT.route } component={ NEW_PAYMENT.component } />\r\n          <Route exact path={ PAYMENT.route } component={ PAYMENT.component } />\r\n          <Route exact path={ NEW_PARTICIPANT.route } component={ NEW_PARTICIPANT.component } />\r\n          <Route exact path=\"*\" ><Redirect to={ HOME.route } /> </Route>       \r\n    </Switch>\r\n</Router>\r\n  </Suspense>\r\n);\r\n}\r\n\r\nexport default RouterComponent;\r\n\r\n\r\n","import './App.css';\nimport RouterComponent from './Routes/RouterComponent';\n\nimport  { PaymentContextProvider } from './Providers/Payments/payments.provider';\nimport  { ResponsePaymentListContextProvider } from './Providers/Response/response.payment.list.provider';\n\nconst App = ()  => {\n\n  return (\n\n    <PaymentContextProvider>\n      < ResponsePaymentListContextProvider>\n      <RouterComponent />\n      </ ResponsePaymentListContextProvider>\n    </PaymentContextProvider>\n  \n);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}